"""\1"""
import json
import os
import time

import pytest

from src.monitor import MetricsMonitor


@pytest.fixture
def monitor(test_data_dir):
"""\1"""
# Create config directory
config_dir = os.path.join(test_data_dir, "metrics")
os.makedirs(config_dir, exist_ok=True)

# Create config files
process_config = {
"processes": [
{
"name": "python",
"pattern": "python",
"metrics": ["cpu", "memory", "threads"],
},
],
}
system_config = {
"metrics": {
"cpu": True,
"memory": True,
"disk": True,
"network": True,
"load": True,
},
}

with open(os.path.join(config_dir, "process_metrics.json"), "w") as f:
json.dump(process_config, f)
with open(os.path.join(config_dir, "system_metrics.json"), "w") as f:
json.dump(system_config, f)

return MetricsMonitor(config_dir=config_dir)

def test_monitor_collects_metrics(monitor, test_data_dir):
"""\1"""
# Create data directory in test location
data_dir = os.path.join(test_data_dir, "metrics", "data")
os.makedirs(data_dir, exist_ok=True)

# Collect metrics
monitor._collect_metrics()

# Check that metrics file was created
files = os.listdir(data_dir)
assert len(files) > 0

# Verify metrics file content
with open(os.path.join(data_dir, files[0])) as f:
metrics = json.load(f)

assert "timestamp" in metrics
assert "system" in metrics
assert "processes" in metrics

def test_monitor_respects_collection_interval(monitor, test_data_dir):
"""\1"""
# Create data directory in test location
data_dir = os.path.join(test_data_dir, "metrics", "data")
os.makedirs(data_dir, exist_ok=True)

# Clear any existing files
for file in os.listdir(data_dir):
os.remove(os.path.join(data_dir, file))

# Collect metrics twice with short interval
monitor._collect_metrics()
time.sleep(1)
monitor._collect_metrics()

# Check number of files created
files = sorted(os.listdir(data_dir))
assert len(files) == 2

# Verify timestamps are different
timestamps = []
for file in files:
with open(os.path.join(data_dir, file)) as f:
metrics = json.load(f)
timestamps.append(metrics["timestamp"])

assert timestamps[1] > timestamps[0]

def test_monitor_handles_missing_processes(monitor, test_data_dir):
"""\1"""
# Create data directory in test location
data_dir = os.path.join(test_data_dir, "metrics", "data")
os.makedirs(data_dir, exist_ok=True)

# Add non-existent process to monitor
monitor.process_config["processes"].append(
{
"name": "nonexistent",
"pattern": "this_process_does_not_exist",
"metrics": ["cpu", "memory"],
},
)

# Collect metrics
monitor._collect_metrics()

# Verify metrics were collected without error
files = os.listdir(data_dir)
assert len(files) > 0

# Verify metrics file content
with open(os.path.join(data_dir, files[0])) as f:
metrics = json.load(f)

assert "processes" in metrics
assert "nonexistent" not in metrics["processes"]
