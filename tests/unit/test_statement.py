"""InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401
import unittest
from typing import Any, Dict, List, Optional, Set, Tuple, Union, cast


class StatementData:
    def __init__(self, type_: Optional[str] = None, assignment: Optional[str] = None) -> None:
        self._type = type_
        self._assignment = assignment
        self.discriminator = None

    @property
    def type(self):
        return self._type

    @type.setter
    def type(self, value):
        self._type = value

    @property
    def assignment(self):
        return self._assignment

    @assignment.setter
    def assignment(self, value):
        self._assignment = value


class TestStatement(unittest.TestCase):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    openapi_types = {"type": "str", "assignment": "VariableAssignment"}
    attribute_map = {"type": "type", "assignment": "assignment"}
    statement: Optional[Any] = None
    dialect: Optional[Any] = None
    statement_options: Dict[str, Union[str, List[str], Set[str], Tuple[str, ...], Optional[str]]]

    def setUp(self) -> None:
        self.statement_data = StatementData()
        self.statement_options = {
            "name": "test_statement",
            "values": ["value1", "value2"],
            "unique_values": {"unique1", "unique2"},
            "tuple_values": ("tuple1", "tuple2"),
            "optional_value": None,
        }

    def test_statement(self) -> None:
        """Test basic statement functionality."""
        assert self.statement_options is not None
        assert self.statement_options["name"] == "test_statement"
        self.assertListEqual(
            cast(List[str], self.statement_options["values"]),
            ["value1", "value2"],
        )
        self.assertSetEqual(
            cast(Set[str], self.statement_options["unique_values"]),
            {"unique1", "unique2"},
        )
        self.assertTupleEqual(
            cast(Tuple[str, ...], self.statement_options["tuple_values"]),
            ("tuple1", "tuple2"),
        )
        assert self.statement_options["optional_value"] is None

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr in self.openapi_types:
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    ),
                )
            else:
                result[attr] = value

        return result

    def to_str(self) -> str:
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, TestStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other

    def __hash__(self):
        return id(self)
