"""InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

from influxdb_client.domain.statement import Statement


class TestStatement(Statement):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"type": "str", "assignment": "VariableAssignment"}

    attribute_map = {"type": "type", "assignment": "assignment"}

    def __init__(self, type=None, assignment=None) -> None:
        """TestStatement - a model defined in OpenAPI."""
        super().__init__()
        self._type = type if type is not None else None
        self._assignment = assignment if assignment is not None else None
        self.discriminator = None

    @property
    def type(self):
        """Get the type of this TestStatement.

        Type of AST node

        :return: The type of this TestStatement.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Set the type of this TestStatement.

        Type of AST node

        :param type: The type of this TestStatement.
        :type: str
        """
        self._type = type

    @property
    def assignment(self):
        """Get the assignment of this TestStatement.

        :return: The assignment of this TestStatement.
        :rtype: VariableAssignment
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Set the assignment of this TestStatement.

        :param assignment: The assignment of this TestStatement.
        :type: VariableAssignment
        """
        self._assignment = assignment

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr in self.openapi_types:
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    ),
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, TestStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
