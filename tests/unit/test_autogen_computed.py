"""Test cases for autogenerated computed columns."""
from sqlalchemy import Column, Computed, Integer, MetaData, String, Table


def test_basic_computed_column():
    """Test basic computed column generation."""
    metadata = MetaData()
    t = Table(
        "test",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("value", Integer),
        Column("double_value", Integer, server_default=Computed("value * 2")),
    )
    assert str(t.c.double_value.server_default.sqltext) == "value * 2"


def test_computed_column_with_function():
    """Test computed column with function call."""
    metadata = MetaData()
    t = Table(
        "test",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("value", Integer),
        Column("abs_value", Integer, server_default=Computed("ABS(value)")),
    )
    assert str(t.c.abs_value.server_default.sqltext) == "ABS(value)"


def test_computed_column_with_multiple_columns():
    """Test computed column referencing multiple columns."""
    metadata = MetaData()
    t = Table(
        "test",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("x", Integer),
        Column("y", Integer),
        Column("sum", Integer, server_default=Computed("x + y")),
    )
    assert str(t.c.sum.server_default.sqltext) == "x + y"


def test_computed_column_with_constants():
    """Test computed column with literal values."""
    metadata = MetaData()
    t = Table(
        "test",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("value", Integer),
        Column("scaled", Integer, server_default=Computed("value * 100")),
    )
    assert str(t.c.scaled.server_default.sqltext) == "value * 100"


def test_computed_column_with_complex_expression():
    """Test computed column with complex expression."""
    metadata = MetaData()
    t = Table(
        "test",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("x", Integer),
        Column("y", Integer),
        Column("z", Integer),
        Column("result", Integer, server_default=Computed("(x + y) * z")),
    )
    assert str(t.c.result.server_default.sqltext) == "(x + y) * z"


def test_computed_column_with_string_operations():
    """Test computed column with string operations."""
    metadata = MetaData()
    t = Table(
        "test",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("first_name", String),
        Column("last_name", String),
        Column("full_name", String, server_default=Computed("first_name || ' ' || last_name")),
    )
    assert str(t.c.full_name.server_default.sqltext) == "first_name || ' ' || last_name"


def test_computed_column_with_math_functions():
    """Test computed column with mathematical functions."""
    metadata = MetaData()
    t = Table(
        "test",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("value", Integer),
        Column("sqrt", Integer, server_default=Computed("SQRT(ABS(value))")),
    )
    assert str(t.c.sqrt.server_default.sqltext) == "SQRT(ABS(value))"
