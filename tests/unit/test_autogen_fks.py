"""Test cases for autogenerated foreign keys."""
from itertools import combinations

from sqlalchemy import Column, ForeignKey, Integer, MetaData, Table, UniqueConstraint


def test_basic_foreign_key():
    """Test basic foreign key generation."""
    metadata = MetaData()
    Table("parent", metadata, Column("id", Integer, primary_key=True))

    child = Table(
        "child",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("parent_id", Integer, ForeignKey("parent.id")),
    )

    assert isinstance(child.c.parent_id.type, Integer)


def test_foreign_key_with_multiple_columns():
    """Test foreign key with multiple columns."""
    metadata = MetaData()
    Table(
        "parent",
        metadata,
        Column("id1", Integer, primary_key=True),
        Column("id2", Integer, primary_key=True),
    )

    child = Table(
        "child",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("parent_id1", Integer, ForeignKey("parent.id1")),
        Column("parent_id2", Integer, ForeignKey("parent.id2")),
    )

    assert isinstance(child.c.parent_id1.type, Integer)
    assert isinstance(child.c.parent_id2.type, Integer)


def test_foreign_key_with_nullable():
    """Test foreign key with nullable option."""
    metadata = MetaData()
    Table("parent", metadata, Column("id", Integer, primary_key=True))

    child = Table(
        "child",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("parent_id", Integer, ForeignKey("parent.id"), nullable=True),
    )

    assert child.c.parent_id.nullable is True


def test_foreign_key_with_non_nullable():
    """Test foreign key with non-nullable option."""
    metadata = MetaData()
    Table("parent", metadata, Column("id", Integer, primary_key=True))

    child = Table(
        "child",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("parent_id", Integer, ForeignKey("parent.id"), nullable=False),
    )

    assert child.c.parent_id.nullable is False


def test_foreign_key_with_unique():
    """Test foreign key with unique constraint."""
    metadata = MetaData()
    Table("parent", metadata, Column("id", Integer, primary_key=True))

    child = Table(
        "child",
        metadata,
        Column("id", Integer, primary_key=True),
        Column("parent_id", Integer, ForeignKey("parent.id")),
        UniqueConstraint("parent_id"),
    )

    # Check if any unique constraints exist for the column
    has_unique = any(
        isinstance(constraint, UniqueConstraint)
        and list(constraint.columns.keys()) == ["parent_id"]
        for constraint in child.constraints
    )
    assert has_unique is True


def test_foreign_key_combinations():
    """Test various combinations of foreign key options."""
    metadata = MetaData()
    Table("parent", metadata, Column("id", Integer, primary_key=True))

    option_list = [{"nullable": True}, {"nullable": False}]

    for i, option_set in enumerate(combinations(option_list, 1)):
        # Merge all dictionaries in the combination
        opts = {}
        for d in option_set:
            opts.update(d)

        # Create table with or without unique constraint
        if i % 2 == 0:  # Add unique constraint to even-numbered tables
            child = Table(
                f"child_{i}",
                metadata,
                Column("id", Integer, primary_key=True),
                Column("parent_id", Integer, ForeignKey("parent.id"), **opts),
                UniqueConstraint("parent_id"),
            )
            expected_unique = True
        else:
            child = Table(
                f"child_{i}",
                metadata,
                Column("id", Integer, primary_key=True),
                Column("parent_id", Integer, ForeignKey("parent.id"), **opts),
            )
            expected_unique = False

        # Check nullable option
        if "nullable" in opts:
            assert child.c.parent_id.nullable is opts["nullable"]

        # Check unique constraint
        has_unique = any(
            isinstance(constraint, UniqueConstraint)
            and list(constraint.columns.keys()) == ["parent_id"]
            for constraint in child.constraints
        )
        assert has_unique is expected_unique
