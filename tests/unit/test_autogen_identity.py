"""Test cases for autogenerated identity columns."""
from sqlalchemy import Column, Integer, MetaData, Table, UniqueConstraint


def test_basic_identity():
    """Test basic identity column generation."""
    metadata = MetaData()
    t = Table("test", metadata, Column("id", Integer, primary_key=True))

    assert t.c.id.primary_key is True
    assert isinstance(t.c.id.type, Integer)


def test_multiple_identity_columns():
    """Test multiple identity columns."""
    metadata = MetaData()
    t = Table(
        "test",
        metadata,
        Column("id1", Integer, primary_key=True),
        Column("id2", Integer, primary_key=True),
    )

    assert t.c.id1.primary_key is True
    assert t.c.id2.primary_key is True
    assert isinstance(t.c.id1.type, Integer)
    assert isinstance(t.c.id2.type, Integer)


def test_identity_with_nullable():
    """Test identity column with nullable option."""
    metadata = MetaData()
    t = Table("test", metadata, Column("id", Integer, primary_key=True, nullable=True))

    assert t.c.id.primary_key is True
    assert t.c.id.nullable is True


def test_identity_with_non_nullable():
    """Test identity column with non-nullable option."""
    metadata = MetaData()
    t = Table("test", metadata, Column("id", Integer, primary_key=True, nullable=False))

    assert t.c.id.primary_key is True
    assert t.c.id.nullable is False


def test_identity_with_unique():
    """Test identity column with unique constraint."""
    metadata = MetaData()
    t = Table("test", metadata, Column("id", Integer, primary_key=True), UniqueConstraint("id"))

    assert t.c.id.primary_key is True

    # Check if any unique constraints exist for the column
    has_unique = any(
        isinstance(constraint, UniqueConstraint) and list(constraint.columns.keys()) == ["id"]
        for constraint in t.constraints
    )
    assert has_unique is True


def test_identity_with_all_options():
    """Test identity column with all options."""
    metadata = MetaData()
    t = Table(
        "test",
        metadata,
        Column("id", Integer, primary_key=True, nullable=False),
        UniqueConstraint("id"),
    )

    assert t.c.id.primary_key is True
    assert t.c.id.nullable is False

    # Check if any unique constraints exist for the column
    has_unique = any(
        isinstance(constraint, UniqueConstraint) and list(constraint.columns.keys()) == ["id"]
        for constraint in t.constraints
    )
    assert has_unique is True
