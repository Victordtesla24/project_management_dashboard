import socket

import pytest

from dashboard.config import init_config
from dashboard.websocket.server import MetricsWebSocket


def get_free_port():
"""\1"""
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
s.bind(("", 0))
s.listen(1)
return s.getsockname()[1]


@pytest.fixture(autouse=True)
def setup_config(config_file):
"""\1"""
init_config(config_file)


@pytest.fixture
async def websocket_server():
"""\1"""
port = get_free_port()
server = MetricsWebSocket()
server.port = port
await server.start_server()
yield server
await server.stop_server()


@pytest.mark.asyncio
async def test_start_server(websocket_server):
"""\1"""
assert websocket_server.server is not None


@pytest.mark.asyncio
async def test_register_client(websocket_server):
"""\1"""
# Simulate client connection
client = {"id": "123", "ws": None}
await websocket_server.register_client(client)
assert len(websocket_server.clients) == 1


@pytest.mark.asyncio
async def test_broadcast_message(websocket_server):
"""\1"""
# Add test clients
clients = [{"id": "1", "ws": None}, {"id": "2", "ws": None}]
for client in clients:
await websocket_server.register_client(client)
# Test broadcast
message = {"type": "metrics", "data": {"cpu": 50}}
await websocket_server.broadcast_message(message)


@pytest.mark.asyncio
async def test_collect_metrics(websocket_server):
"""\1"""
# Test metrics collection
metrics = await websocket_server.collect_metrics()
assert isinstance(metrics, dict)
assert "cpu" in metrics
assert "memory" in metrics
assert "disk" in metrics


@pytest.mark.asyncio
async def test_send_initial_data(websocket_server):
"""\1"""
# Simulate client
client = {"id": "123", "ws": None}
await websocket_server.register_client(client)
# Test sending initial data
await websocket_server.send_initial_data(client)


@pytest.mark.asyncio
async def test_stop_server(websocket_server):
"""\1"""
await websocket_server.stop_server()
assert websocket_server.server is None


@pytest.mark.asyncio
async def test_error_handling(websocket_server):
"""\1"""
# Test invalid message handling
with pytest.raises(ValueError):
await websocket_server.handle_message(None, "invalid message")


@pytest.mark.asyncio
async def test_metric_data_validation(websocket_server):
"""\1"""
# Test invalid metric data
invalid_data = {"type": "metrics", "data": {"invalid": "data"}}
with pytest.raises(ValueError):
await websocket_server.validate_metric_data(invalid_data)


@pytest.mark.asyncio
async def test_concurrent_clients(websocket_server):
"""\1"""
# Add multiple clients
clients = [{"id": str(i), "ws": None} for i in range(5)]
for client in clients:
await websocket_server.register_client(client)
assert len(websocket_server.clients) == 5


@pytest.mark.asyncio
async def test_metric_data_creation(websocket_server):
"""\1"""
# Test metric data creation
data = await websocket_server.create_metric_data()
assert isinstance(data, dict)
assert "metrics" in data
assert "timestamp" in data
